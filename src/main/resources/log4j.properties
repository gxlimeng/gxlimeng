#log4j.rootCategory=[ level ] , appenderName, appenderName2level：日志的级别 ALL < DEBUG < INFO < WARN < ERROR < FATAL
log4j.rootCategory=DEBUG , CLOG, DLOG , ELOG
 
### Console.log 输出到控制台 ###  
log4j.appender.CLOG = org.apache.log4j.ConsoleAppender
log4j.appender.CLOG.Target = System.out
log4j.appender.CLOG.Threshold = DEBUG
log4j.appender.CLOG.layout = org.apache.log4j.PatternLayout
log4j.appender.CLOG.layout.ConversionPattern = %d{ABSOLUTE} %5p %t %c{2}:%L - <%m>%n
log4j.appender.CLOG.Encoding = UTF-8

## Debug.log 输出DEBUG级别以上的日志  
log4j.appender.DLOG = org.apache.log4j.DailyRollingFileAppender
log4j.appender.DLOG.File = ${gxlimeng}WEB-INF/logs/debug.log
log4j.appender.DLOG.file.MaxFileSize=500KB
log4j.appender.DLOG.Append = true
log4j.appender.DLOG.Threshold = DEBUG
log4j.appender.DLOG.layout = org.apache.log4j.PatternLayout
log4j.appender.DLOG.layout.ConversionPattern =%d{ABSOLUTE} %5p %t %c{2}:%L - <%m>%n
log4j.appender.DLOG.Encoding=UTF-8

## Error.log 输出ERROR级别以上的日志  
log4j.appender.ELOG = org.apache.log4j.DailyRollingFileAppender
log4j.appender.ELOG.File = ${gxlimeng}WEB-INF/logs/error.log  
log4j.appender.ELOG.file.MaxFileSize=500KB
log4j.appender.ELOG.Append = true
log4j.appender.ELOG.Threshold = ERROR
log4j.appender.ELOG.layout = org.apache.log4j.PatternLayout
log4j.appender.ELOG.layout.ConversionPattern =%d{ABSOLUTE} %5p %t %c{2}:%L - <%m>%n


### SQL Log ###   
##log4j.logger.com.ibatis=DEBUG
##log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG
##log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG
##log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG

##log4j.logger.java.sql.Connection=DEBUG
##log4j.logger.java.sql.Statement=DEBUG
##log4j.logger.java.sql.PreparedStatement=DEBUG
##log4j.logger.java.sql.ResultSet=DEB

### Spring Log ### 
log4j.logger.com.springframework=DEBUG
log4j.category.org.exam=DEBUG
log4j.category.org.springframework.beans.factory=INFO



#%p 输出优先级，即 DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%c 输出所属的类目，通常就是所在类的全名
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
#%n 输出一个换行
#%m 输出代码中指定的讯息，如log(message)中的message 